A city needs to plan its infrastructure development by connecting 
multiple locations with minimum cost. The task is to find the minimum 
spanning tree (MST) of the city's locations using Prim's algorithm. This 
will help determine the optimal connections and minimize the overall 
cost of infrastructure development. The objective of this case study is 
to implement Prim's algorithm to solve the infrastructure planning 
problem in C language. By solving this problem, we can identify the 
minimum cost connections between locations and guide the city's 
infrastructure development.

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent the graph
struct Graph {
    int V, E;
    struct Edge* edge;
};

// Create a new graph
struct Graph* createGraph(int V, int E) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->E = E;
    graph->edge = (struct Edge*)malloc(E * sizeof(struct Edge));
    return graph;
}

// Utility function to find the minimum key value
int minKey(int key[], bool mstSet[], int V) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to print the MST
void printMST(struct Graph* graph, int parent[]) {
    printf("Edge   Weight\n");
    for (int i = 1; i < graph->V; i++) {
        printf("%d - %d    %d\n", parent[i], i, graph->edge[i].weight);
    }
}

// Function to find the MST using Prim's algorithm
void primMST(struct Graph* graph) {
    int V = graph->V;
    int parent[V];
    int key[V];
    bool mstSet[V];

    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet, V);
        mstSet[u] = true;

        for (int v = 0; v < V; v++) {
            if (graph->edge[u].weight < key[v] && !mstSet[v]) {
                parent[v] = u;
                key[v] = graph->edge[u].weight;
            }
        }
    }

    // Print the MST
    printMST(graph, parent);
}

int main() {
    // Input the number of vertices and edges
    int V, E;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    printf("Enter the number of edges: ");
    scanf("%d", &E);

    // Create the graph
    struct Graph* graph = createGraph(V, E);

    // Input the edges and their weights
    printf("Enter the edges (src dest weight):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &graph->edge[i].src, &graph->edge[i].dest, &graph->edge[i].weight);
    }

    // Find and print the MST
    primMST(graph);

    // Free allocated memory
    free(graph->edge);
    free(graph);

    return 0;
}
