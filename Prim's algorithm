
}
Prim's algorithm
#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_VERTICES 100

// Structure to represent an edge in the graph
struct Edge {
    int source, destination, weight;
};

// Structure to represent a graph
struct Graph {
    int numVertices, numEdges;
    struct Edge edges[MAX_VERTICES];
};

void primMST(struct Graph* graph) {
    int numVertices = graph->numVertices;
    int parent[MAX_VERTICES]; // Array to store the parent of each vertex in the MST
    int key[MAX_VERTICES];    // Array to store the key values of vertices
    bool inMST[MAX_VERTICES]; // Array to track whether a vertex is in the MST

    // Initialize key values and inMST flags
    for (int i = 0; i < numVertices; i++) {
        key[i] = INT_MAX;
        inMST[i] = false;…
Dijkstra's algorithm
#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_VERTICES 100

// Structure to represent a weighted edge in the graph
struct Edge {
    int destination, weight;
};

// Structure to represent a graph
struct Graph {
    int numVertices;
    struct Edge edges[MAX_VERTICES][MAX_VERTICES];
};

void dijkstra(struct Graph* graph, int source) {
    int numVertices = graph->numVertices;
    int distance[MAX_VERTICES];   // Array to store the shortest distance from source to each vertex
    bool visited[MAX_VERTICES];   // Array to track whether a vertex has been visited

    // Initialize distance array and visited array
    for (int i = 0; i < numVertices; i++) {
        distance[i] = INT_MAX;
        visited[i] = false;
    }

    // Distanc…
