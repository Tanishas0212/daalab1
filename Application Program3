Social networks consist of individuals connected through various 
relationships. Analyzing the connectivity within a social network can 
provide insights into communities, influence propagation, and 
information flow. One way to analyze the connectivity is to find the 
connected components within the network. Given a social network 
represented as an adjacency matrix, the task is to find the connected 
components using the Depth-First Search (DFS) algorithm. The 
program should implement the DFS algorithm to traverse the 
network, identify the connected components, and display them


#include <stdio.h>

#define MAX_NODES 100

int adjacencyMatrix[MAX_NODES][MAX_NODES];
int visited[MAX_NODES];

void depthFirstSearch(int node, int numNodes) {
    visited[node] = 1;
    printf("%d ", node);

    for (int i = 0; i < numNodes; i++) {
        if (adjacencyMatrix[node][i] && !visited[i]) {
            depthFirstSearch(i, numNodes);
        }
    }
}

void findConnectedComponents(int numNodes) {
    for (int i = 0; i < numNodes; i++) {
        if (!visited[i]) {
            printf("Connected Component: ");
            depthFirstSearch(i, numNodes);
            printf("\n");
        }
    }
}

int main() {
    int numNodes;
    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < numNodes; i++) {
        for (int j = 0; j < numNodes; j++) {
            scanf("%d", &adjacencyMatrix[i][j]);
        }
        visited[i] = 0;
    }

    printf("Connected components:\n");
    findConnectedComponents(numNodes);

    return 0;
}
